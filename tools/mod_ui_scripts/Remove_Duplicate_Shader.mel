global proc Show_UI()
{
	string $window = `window -title "Clean Shaders Duplicates"
		   -iconName "Short Name"
		   -widthHeight 200 55`;
	columnLayout -adjustableColumn true;
			 button -label "Clean" -command ("clean_Shaders");
	setParent ..;
	showWindow $window;
}


global proc clean_Shaders()
{
	getAllTextureAndShaders;
	RemoveShaders;
}

global string $GetUniqueShader[];
clear $GetUniqueShader;
global string $GetUniqueTextures[];
clear  $GetUniqueTextures;
global string $objshaders[];
clear $objshaders;
global string $matttlistsfinal[];


global proc int  Get_Texture_Counts(string $TextureFilename)
{
	global string $GetUniqueShader[];
	global string $GetUniqueTextures[];
	int $file_count=0;
	int $i=0;
	string $shorterList[] = stringArrayRemoveDuplicates($GetUniqueTextures);
	int $k;
	for($i=0;$i<size($GetUniqueTextures);$i++)
	{
		if($TextureFilename == $GetUniqueTextures[$i])
		{
			$file_count = $file_count + 1; 
			$objshaders[$k] = $GetUniqueShader[$i];
			//print($objshaders[$k] + $GetUniqueTextures[$i]);
			$k =  $k + 1;
		}
	}
	return $file_count; 
}


global proc getAllTextureAndShaders()
{
	global string $GetUniqueShader[];
	global string $GetUniqueTextures[];
	global string $matttlistsfinal[];
	string $TexturesFiles[] =`ls -mat -sl`;
	string $matttlistsfinal[] =`ls -mat -sl`;
	int $i=0;
	int $ctr=0;
	for($i=0;$i<size($TexturesFiles);$i++)
	{
		string $ShaderNames[]=`listConnections -t "file" $TexturesFiles[$i]`;
		print($ShaderNames[0]);
		for($k=0;$k<size($ShaderNames);$k++)
		{
			string $TextureAssign=`getAttr ($ShaderNames[$k] + ".fileTextureName")`;
			$GetUniqueTextures[$ctr] = $TextureAssign;
			$GetUniqueShader[$ctr] = $ShaderNames[$k];
			//print ($TextureAssign);
			//print(Get_Texture_Counts($TextureAssign));
			//string $Filescon[]=`listConnections $TexturesFiles[0]`;
			$ctr = $ctr + 1;
		}
	}
	//print $GetUniqueShader;
	//print $GetUniqueTextures;
}



global proc RemoveShaders()
{
	global string $GetUniqueShader[];
	global string $GetUniqueTextures[];
	global string $matttlistsfinal[];
	select $matttlistsfinal;
	string $TexturesFiles[] =`ls -mat -sl`;
	global string $matchshaders[];
	clear $matchshaders;
	global string $matchtextures[];
	clear $matchtextures;
	int $i=0;
	int $ctr=0;
	int $kk=0;

	for($i=0;$i<size($TexturesFiles);$i++)
	{
		string $ShaderNames[]=`listConnections -t "file" $TexturesFiles[$i]`;
		for($k=0;$k<size($ShaderNames);$k++)
		{
			string $TextureAssign=`getAttr ($ShaderNames[$k] + ".fileTextureName")`;
			$GetUniqueTextures[$ctr] = $TextureAssign;
			$GetUniqueShader[$ctr] = $ShaderNames[$k];
			//print(Get_Texture_Counts($TextureAssign));
			if(Get_Texture_Counts($TextureAssign)>1)
			{
				print($TexturesFiles[$i] + "," + $TextureAssign + "\n");
				$matchshaders[$kk] =  $TexturesFiles[$i];
				$matchtextures[$kk] = $TextureAssign;
				$kk = $kk + 1;
				
				clear($GetUniqueTextures);
				clear($GetUniqueShader);
				getAllTextureAndShaders;
			}
			$ctr = $ctr + 1;
		}
	}

	string $delshaderList[];
	clear $delshaderList;
	int $delctr=0;

	for($i=0;$i<size($matchshaders);$i++)
	{
		select -cl;
		string $selobj[];
		clear $selobj;
		string $objlist[];
		clear $objlist;
		hyperShade -objects $matchshaders[$i];
		for($k=0;$k<size($matchtextures);$k++)
		{
		   if($matchtextures[$i] == $matchtextures[$k])
			{  
				hyperShade -a $matchshaders[$k];
				$delshaderList[$delctr] = $matchshaders[$i];
				$delctr = $delctr + 1;
				//catch(`delete $matchshaders[$k]`);
			}
			//string $ob[]=`ls -sl`;
			//int $cx=0;
			//for($c=0;$c<size($ob);$c++)
			//{
				//$objlist[$cx] = $ob[$c];
				//$c = $c + 1;
				//$cx = $cx + 1;
				//catch(`delete $matchshaders[$k]`);
			//}
		}
	// select $objlist;
	//hyperShade -a $matchshaders[$i];  
	}

	for($i=0;$i<size($matchshaders);$i++)
	{
		select -cl;
		string $selobj[];
		clear $selobj;
		string $objlist[];
		clear $objlist;
		hyperShade -objects $matchshaders[$i];
		string $kobj[]=`ls -sl`;
		if (size($kobj)==0)
		{
			catch(`delete  $matchshaders[$i]`);
		}
	}
}





